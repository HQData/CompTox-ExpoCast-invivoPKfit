#Get CAS from compound
nheerl.data <- merge(nheerl.data,
CAS.table[, .(Compound, CAS)],
by='Compound')
nheerl.data[Route=='iv', Dose:=as.numeric(IV.Dose.mg.kg)]
nheerl.data[Route=='po', Dose:=as.numeric(Oral.Dose.mg.kg)]
nheerl.data[, IV.Dose.mg.kg:=NULL]
nheerl.data[, Oral.Dose.mg.kg:=NULL]
nheerl.data[, Value:=as.numeric(Value)/1000] #convert ng/mL to mg/L
nheerl.data[,Reference:="NHEERL 2015"]
nheerl.data[,Source:="NHEERL 2015"]
nheerl.data[,Species:="rat"]
nheerl.data[,Media:="Plasma concentration"]
nheerl.data[,Time.Units:="h"]
nheerl.data[,Species.Weight.Units:="kg"]
nheerl.data[,Media.Units:="ug/mL"]
nheerl.data[,Units:="mg/kg"]
data.set <- rbind(TNO.dat,
RTI.data,
nheerl.data,
fill=TRUE)
data.set <- subset(data.set,
!is.na(Value)) #remove all NA data
pkdataset_nheerlcleaned <- data.set
head(nheerl.data)
sheet.index <- 1
this.data <- read.xls("NHEERL/ToxCast Bioavailability Blood levels_083015.xlsx",
stringsAsFactors=F,
sheet=sheet.index,
skip=1)
this.data.list <- strsplit(this.data[,1],
" ")
class(this.data)
head(this.data)
this.data.list[[2]][1] %in% NHEERL.chems$Compound
this.chem <- this.data.list[[2]][1] #Extract compound name
this.CAS <- CAS.table[CAS.table$Compound==this.chem,
"CAS"] #Match with CAS
this.oral.dose <- NHEERL.chems[NHEERL.chems$Compoundl==this.chem,
"Oral.Dose.mg.kg"] #Match with oral dose
this.iv.dose <- NHEERL.chems[NHEERL.chems$Compound==this.chem,
"IV.Dose.mg.kg"] #Match with IV dose
length(this.data.list)
this.data.list[[1]]
this.data.list[[2]]
this.data.list[[3]]
rm(list=ls())
source('L:/Lab/NCCT_ExpoCast/ExpoCast2016/CarolineRing/invivoPKfit/data-raw/make_data_set.R')
source('L:/Lab/NCCT_ExpoCast/ExpoCast2016/CarolineRing/invivoPKfit/data-raw/make_data_set.R')
?grepl
rm(list=ls())
source('L:/Lab/NCCT_ExpoCast/ExpoCast2016/CarolineRing/invivoPKfit/data-raw/make_data_set.R')
warnings()
head(pkdataset_nheerlorig)
tail(pkdataset_nheerlorig)
source('L:/Lab/NCCT_ExpoCast/ExpoCast2016/CarolineRing/invivoPKfit/data-raw/make_data_set.R')
tail(pkdataset_nheerlorig)
tail(pkdataset_nheerlcleaned)
pkdataset_nheerlcleaned[, class(Subject)]
pkdataset_nheerlcleaned[Time==0,]
TNO.dat[, unique(Time.Units)]
RTI.data[, unique(Time.Units)]
pkdataset_nheerlcleaned[, unique(Time.Units)]
pkdataset_nheerlcleaned[, unique(Species)]
source('L:/Lab/NCCT_ExpoCast/ExpoCast2016/CarolineRing/invivoPKfit/data-raw/make_data_set.R')
getwd()
setwd()
setwd("L:/Lab/NCCT_ExpoCast/ExpoCast2016/CarolineRing/invivoPKfit")
?devtools::build
devtools::build()
devtools::build(path="L:/Lab/NCCT_ExpoCast/ExpoCast2016/CarolineRing")
devtools::build()
devtools::load_all(".")
tmp <- fit_all(data.set=pkdataset_nheerlcleaned[Compound=="Simazine", ], model="2compartment", modelfun="analytic")
data.set <- copy(pkdataset_nheerlcleaned[Compound=="Simazine", ])
library(data.table)
data.set <- copy(pkdataset_nheerlcleaned[Compound=="Simazine", ])
model <- "2compartment"
modelfun <- "analytic"
# Not a lot of Imazalil oral data so skip for now:
data.set <- subset(data.set,
Compound != "Imazalil" |
Route=="iv")
#So now we have a data set composed of:
#the TNO data
#the RTI data
#the NHEERL data
#Now proceed to the analysis
#set an iv variable to TRUE/FALSE
data.set[Route=='iv', iv:=TRUE]
data.set[Route!='iv', iv:=FALSE]
data.set[, Time.Days:=Time/24]  #convert time from hours to days
data.set[, c('Max.Time.Days',
'Time.Steps.PerHour'):=list(max(Time.Days),
1/min(diff(c(0,sort(unique(Time)))))),
by=.(CAS, Dose, Route)]
tmp <- data.set[, httk::parameterize_1comp(chem.cas=CAS,
default.to.human=TRUE,
species="Rat"),
by=CAS]
params.by.cas <- tmp[, .(CAS, kelim, Rblood2plasma,
MW, hematocrit, million.cells.per.gliver)]
#Since we don't yet have 2comp predictions,
#just choose some arbitrary numbers as starting points for the fit.
params.by.cas[, V1:=10]
params.by.cas[, k21:=1.2]
params.by.cas[, k12:=0.8]
params.by.cas[, kgutabs:=1] #Assume this absorption rate for everything
params.by.cas[, Fgutabs:=1] #Assume 100% bioavailability for everything
if (modelfun=="analytic") params.by.cas[, setdiff(names(params.by.cas),
c("CAS",
"kelim",
"k12",
"k21",
"V1",
"Fgutabs",
"kgutabs")):=NULL]
data.set <- merge(data.set,
params.by.cas,
by='CAS')
paramnames <- names(params.by.cas)
paramnames <- paramnames[paramnames!='CAS']
fitdata <- copy(data.set)
this.cas <- data.set[, unique(CAS)]
print(this.cas)
out.dt <- fitdata[1,paramnames, with=FALSE]
out.dt[, param.value.type:='Predicted']
these.params <- as.list(fitdata[1, paramnames, with=FALSE])
these.params
fitdata[, Reference:=gsub(Reference,
pattern=' ',
replacement='.')]
refs <- fitdata[,
unique(Reference)]
refs
these.params[sapply(refs,
function(x) paste('sigma2',
x,
sep='.'))] <- rep(1,
length(refs))
PK.fit.all <- data.set[,
analyze.pk.data(fitdata=.SD,
this.cas=CAS,
paramnames=paramnames,
modelfun=modelfun,
model=model),
by=CAS]
pkdataset_nheerlcleaned[Compound=="Simazine", unique(CAS)]
PK.fit.all
library(invivoPKfit)
data.set <- pkdataset_nheerlcleaned[Compound=="Simazine", ]
model <- "2compartment"
modelfun <- "analytic"
# Not a lot of Imazalil oral data so skip for now:
data.set <- subset(data.set,
Compound != "Imazalil" |
Route=="iv")
#So now we have a data set composed of:
#the TNO data
#the RTI data
#the NHEERL data
#Now proceed to the analysis
#set an iv variable to TRUE/FALSE
data.set[Route=='iv', iv:=TRUE]
data.set[Route!='iv', iv:=FALSE]
data.set[, Time.Days:=Time/24]  #convert time from hours to days
data.set[, c('Max.Time.Days',
'Time.Steps.PerHour'):=list(max(Time.Days),
1/min(diff(c(0,sort(unique(Time)))))),
by=.(CAS, Dose, Route)]
tmp <- data.set[, httk::parameterize_1comp(chem.cas=CAS,
default.to.human=TRUE,
species="Rat"),
by=CAS]
params.by.cas <- tmp[, .(CAS, kelim, Rblood2plasma,
MW, hematocrit, million.cells.per.gliver)]
#Since we don't yet have 2comp predictions,
#just choose some arbitrary numbers as starting points for the fit.
params.by.cas[, V1:=10]
params.by.cas[, k21:=1.2]
params.by.cas[, k12:=0.8]
params.by.cas[, kgutabs:=1] #Assume this absorption rate for everything
params.by.cas[, Fgutabs:=1] #Assume 100% bioavailability for everything
if (modelfun=="analytic") params.by.cas[, setdiff(names(params.by.cas),
c("CAS",
"kelim",
"k12",
"k21",
"V1",
"Fgutabs",
"kgutabs")):=NULL]
}
data.set <- merge(data.set,
params.by.cas,
by='CAS')
paramnames <- names(params.by.cas)
paramnames <- paramnames[paramnames!='CAS']
PK.fit.all <- data.set[,
analyze.pk.data(fitdata=.SD,
this.cas=CAS,
paramnames=paramnames,
modelfun=modelfun,
model=model),
by=CAS]
tmp <- data.set[, httk::parameterize_1comp(chem.cas=CAS,
default.to.human=TRUE,
species="Rat"),
by=CAS]
params.by.cas <- tmp[, .(CAS, kelim, Rblood2plasma,
MW, hematocrit, million.cells.per.gliver)]
#Since we don't yet have 2comp predictions,
#just choose some arbitrary numbers as starting points for the fit.
params.by.cas[, V1:=10]
params.by.cas[, k21:=1.2]
params.by.cas[, k12:=0.8]
params.by.cas[, kgutabs:=1] #Assume this absorption rate for everything
params.by.cas[, Fgutabs:=1] #Assume 100% bioavailability for everything
if (modelfun=="analytic") params.by.cas[, setdiff(names(params.by.cas),
c("CAS",
"kelim",
"k12",
"k21",
"V1",
"Fgutabs",
"kgutabs")):=NULL]
data.set <- pkdataset_nheerlcleaned[Compound=="Simazine", ]
data.set <- subset(data.set,
Compound != "Imazalil" |
Route=="iv")
#So now we have a data set composed of:
#the TNO data
#the RTI data
#the NHEERL data
#Now proceed to the analysis
#set an iv variable to TRUE/FALSE
data.set[Route=='iv', iv:=TRUE]
data.set[Route!='iv', iv:=FALSE]
data.set[, Time.Days:=Time/24]  #convert time from hours to days
data.set[, c('Max.Time.Days',
'Time.Steps.PerHour'):=list(max(Time.Days),
1/min(diff(c(0,sort(unique(Time)))))),
by=.(CAS, Dose, Route)]
tmp <- data.set[, httk::parameterize_1comp(chem.cas=CAS,
default.to.human=TRUE,
species="Rat"),
by=CAS]
params.by.cas <- tmp[, .(CAS, kelim, Rblood2plasma,
MW, hematocrit, million.cells.per.gliver)]
#Since we don't yet have 2comp predictions,
#just choose some arbitrary numbers as starting points for the fit.
params.by.cas[, V1:=10]
params.by.cas[, k21:=1.2]
params.by.cas[, k12:=0.8]
params.by.cas[, kgutabs:=1] #Assume this absorption rate for everything
params.by.cas[, Fgutabs:=1] #Assume 100% bioavailability for everything
if (modelfun=="analytic") params.by.cas[, setdiff(names(params.by.cas),
c("CAS",
"kelim",
"k12",
"k21",
"V1",
"Fgutabs",
"kgutabs")):=NULL]
data.set <- merge(data.set,
params.by.cas,
by='CAS')
paramnames <- names(params.by.cas)
paramnames <- paramnames[paramnames!='CAS']
PK.fit.all <- data.set[,
analyze.pk.data(fitdata=.SD,
this.cas=CAS,
paramnames=paramnames,
modelfun=modelfun,
model=model),
by=CAS]
devtools::load_all(".")
PK.fit.all <- data.set[,
analyze.pk.data(fitdata=.SD,
this.cas=CAS,
paramnames=paramnames,
modelfun=modelfun,
model=model),
by=CAS]
PK.fit.all
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
PK.fit.all <- data.set[,
analyze.pk.data(fitdata=.SD,
this.cas=CAS,
paramnames=paramnames,
modelfun=modelfun,
model=model),
by=CAS]
PK.fit.all
params.by.cas
fitdata
cp_1comp(time=c(0,1,2), params=params.by.cas, dose=0.4, iv.dose=TRUE)
params.by.cas
0.4*exp(params.by.cas$kelim*0)/10
cp_1comp(time=0, params=params.by.cas, dose=0.4, iv.dose=TRUE)
cp_1comp(time=1, params=params.by.cas, dose=0.4, iv.dose=TRUE)
cp_1comp(time=1, params=params.by.cas[, .SD, .SDcols=paramnames], dose=0.4, iv.dose=TRUE)
params.by.cas[, .SD, .SDcols=paramnames]
?cp_1comp
cp_1comp(time=1, params=params.by.cas[, .SD, .SDcols=paramnames], dose=0.4, iv.dose=TRUE)
params$kelim
params$Vdist
cp_2comp(time=1, params=params.by.cas[, .SD, .SDcols=paramnames], dose=0.4, iv.dose=TRUE)
cp_2comp(time=0, params=params.by.cas[, .SD, .SDcols=paramnames], dose=0.4, iv.dose=TRUE)
cp_2comp(time=0.01, params=params.by.cas[, .SD, .SDcols=paramnames], dose=0.4, iv.dose=TRUE)
fitdata
these.params
these.params <- lapply(these.params,log)
out <- log.likelihood(params=these.params,
DT=fitdata,
modelfun=modelfun,
model=model)
out
fitdata[, Time]
fitdata[, unique(Time)]
names(fitdata)
fitdata[, unique(Time.Days)]
fitdata[, unique(Time.Steps.PerHour)]
fitdata[, pred:=fitfun(design.times = Time.Days,
design.dose = unique(Dose),
design.iv = unique(iv),
design.times.max = unique(Max.Time.Days),
design.time.step = unique(Time.Steps.PerHour),
modelfun = modelfun,
model=model,
model.params=model.params),
by=.(Dose, Route)]
fitdata[, pred:=fitfun(design.times = Time.Days,
design.dose = unique(Dose),
design.iv = unique(iv),
design.times.max = unique(Max.Time.Days),
design.time.step = unique(Time.Steps.PerHour),
modelfun = modelfun,
model=model,
model.params=these.params),
by=.(Dose, Route)]
fitdata[, .(Dose, Route, Time, Value, pred)]
params <- these.params
cp_2comp(params=params, time=c(0.25,0.5,1,2,4), dose=2.0, iv.dose=FALSE)
params
cp_2comp(params=exp(these.params), time=c(0.25,0.5,1,2,4), dose=2.0, iv.dose=FALSE)
cp_2comp(params=lapply(these.params, exp), time=c(0.25,0.5,1,2,4), dose=2.0, iv.dose=FALSE)
cp_2comp(params=lapply(these.params, exp), time=c(0, 0.25,0.5,1,2,4), dose=2.0, iv.dose=FALSE)
these.params$kgutabs<-log(100)
cp_2comp(params=lapply(these.params, exp), time=c(0, 0.25,0.5,1,2,4), dose=2.0, iv.dose=FALSE)
lapply(these.params, exp)
devtools::load_all(".")
PK.fit.all <- data.set[,
analyze.pk.data(fitdata=.SD,
this.cas=CAS,
paramnames=paramnames,
modelfun=modelfun,
model=model),
by=CAS]
PK.fit.all
these.params
out <- log.likelihood(params=these.params,
DT=fitdata,
modelfun=modelfun,
model=model)
out
opt.params <- these.params[names(these.params) %in%
c("V1",
"k12",
"k21",
"kelim")]
opt.params <- c(opt.params,
these.params[c("Fgutabs","kgutabs")])
opt.params <- c(opt.params,
these.params[regexpr("sigma2",
names(these.params))!=-1])
length(opt.params)>=nrow(fitdata)
fitdata
opt.params
length(opt.params)
const.params <- these.params[!(names(these.params) %in%
names(opt.params))]
these.params["Fgutabs"] <- log(0.99)
#change from a named list of params to optimize to a named vector of params to
#optimize
upper <- unlist(opt.params)
#specify upper bounds of params to optimize (on a log scale!!)
upper[] <- Inf
if (model=='1compartment'){
upper["kelim"] <- 10
}else if (model=='2compartment'){
upper["kelim"] <- 10
upper["k12"] <- 10
upper["k21"] <- 10
}
if ("po" %in% fitdata$Route){
upper["Fgutabs"] <- 0 #on a log scale!
upper["kgutabs"] <- 11
}
these.params$kelim
#factr: controls the convergence of the "L-BFGS-B" method. Convergence occurs when
#the reduction in the objective is within this factor of the machine tolerance
#(from ?optim)
factr <- 1e7
#Set up objective function to minimize:
#minimize negative log-likelihood = maximize log-likelihood
objfun <- function(x) {
foo <- -log.likelihood(params=c(x,const.params),
DT=fitdata,
modelfun=modelfun,
model=model)
#method L-BFGS-B requires finite values be returned,
#so if log-likelihood is NA or -Inf,
#just return a large negative log.likelihood
#(= a large positive -log.likelihood)
if (!is.finite(foo)) foo <- 99999
return(foo)
}
tryCatch(all.data.fit <- optimx::optimx(par=unlist(opt.params),
fn=objfun,
lower=rep(-Inf, length(upper)),
upper=upper,
method="L-BFGS-B", #box constraints
hessian = FALSE,
control=list(factr=factr)),
error = function(err){
browser() #kick to debugger to find out what went wrong
})
#Get MLE params
#ln.means <- all.data.fit$par
ln.means <- as.vector(coef(all.data.fit))
names(ln.means) <- names(opt.params)
#Get SDs from Hessian
#Calculate Hessian using function from numDeriv
numhess <- numDeriv::hessian(func=objfun,
x=ln.means,
method='Richardson')
ln.sds <- tryCatch(diag(solve(numhess))^(1/2),
error = function(err){
#if hessian can't be inverted
print("Hessian can't be inverted; using pseudovariance matrix")
return(diag(chol(MASS::ginv(numhess),
pivot=TRUE))^(1/2)) #pseduovariance matrix
#see http://gking.harvard.edu/files/help.pdf
})
names(ln.sds) <- names(ln.means)
exp(ln.means)
ln.means
devtools::load_all(".")
rm(list=ls())
data.set <- copy(pkdataset_nheerlcleaned)
model <- "2compartment"
modelfun <- "analytic"
# Not a lot of Imazalil oral data so skip for now:
data.set <- subset(data.set,
Compound != "Imazalil" |
Route=="iv")
#So now we have a data set composed of:
#the TNO data
#the RTI data
#the NHEERL data
#Now proceed to the analysis
#set an iv variable to TRUE/FALSE
data.set[Route=='iv', iv:=TRUE]
data.set[Route!='iv', iv:=FALSE]
data.set[, Time.Days:=Time/24]  #convert time from hours to days
data.set[, c('Max.Time.Days',
'Time.Steps.PerHour'):=list(max(Time.Days),
1/min(diff(c(0,sort(unique(Time)))))),
by=.(CAS, Dose, Route)]
# Use this when parameterize_2comp is implemented in httk
#   params.by.cas <- data.set[, httk::parameterize_2comp(chem.cas=CAS,
#                                                  default.to.human=TRUE,
#                                                  species="Rat"),
#                             by=CAS]
tmp <- data.set[, httk::parameterize_1comp(chem.cas=CAS,
default.to.human=TRUE,
species="Rat"),
by=CAS]
params.by.cas <- tmp[, .(CAS, kelim, Rblood2plasma,
MW, hematocrit, million.cells.per.gliver)]
#Since we don't yet have 2comp predictions,
#just choose some arbitrary numbers as starting points for the fit.
params.by.cas[, V1:=10]
params.by.cas[, k21:=1.2]
params.by.cas[, k12:=0.8]
params.by.cas[, kgutabs:=10]
params.by.cas[, Fgutabs:=1] #Assume 100% bioavailability for everything
if (modelfun=="analytic") params.by.cas[, setdiff(names(params.by.cas),
c("CAS",
"kelim",
"k12",
"k21",
"V1",
"Fgutabs",
"kgutabs")):=NULL]
}
data.set <- merge(data.set,
params.by.cas,
by='CAS')
paramnames <- names(params.by.cas)
paramnames <- paramnames[paramnames!='CAS']
data.tmp <- data.set[Compound=="Simazine",]
PK.fit.all <- data.tmp[,
analyze.pk.data(fitdata=.SD,
this.cas=CAS,
paramnames=paramnames,
modelfun=modelfun,
model=model),
by=CAS]
PK.fit.all
